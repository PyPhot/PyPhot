import gc, os
import numpy as np
import numpy.ma as ma

from astropy.io import fits
from astropy.stats import SigmaClip, sigma_clip

from photutils import StdBackgroundRMS, MADStdBackgroundRMS, BiweightScaleBackgroundRMS
from photutils import Background2D, MeanBackground, MedianBackground, SExtractorBackground
from photutils import MMMBackground, BiweightLocationBackground, ModeEstimatorBackground

from pyphot import msgs, sex


def BKG2D(data, back_size, mask=None, filter_size=(3, 3), sigclip=5, back_type='median', back_rms_type='std',
          back_maxiters=5, sextractor_task='sex'):

    ## Sky background subtraction

    if back_type.lower() == 'median':
        bkg_estimator = MedianBackground()
    elif back_type.lower() == 'mean':
        bkg_estimator = MeanBackground()
    elif back_type.lower() == 'sextractor':
        #bkg_estimator = SExtractorBackground()
        bkg_estimator = 'sextractor'
    elif back_type.lower() == 'mmm':
        bkg_estimator = MMMBackground()
    elif back_type.lower() == 'biweight':
        bkg_estimator = BiweightLocationBackground()
    elif back_type.lower() == 'mode':
        bkg_estimator = ModeEstimatorBackground()
    else:
        msgs.warn('{:} Background is not found, using MedianBackground Instead.'.format(back_type))
        bkg_estimator = MedianBackground()

    if back_rms_type.lower() == 'std':
        bkgrms_estimator = StdBackgroundRMS()
    elif back_rms_type.lower() == 'mad':
        bkgrms_estimator = MADStdBackgroundRMS()
    elif back_rms_type.lower() == 'biweight':
        bkgrms_estimator = BiweightScaleBackgroundRMS()
    else:
        msgs.warn('{:} Background RMS type is not found, using STD Instead.'.format(back_rms_type))
        bkgrms_estimator = StdBackgroundRMS()

    if bkg_estimator == 'sextractor':
        msgs.info('Estimating BACKGROUND with SExtractor.')
        tmp_root = 'mask_bright_star_tmp_{:03d}'.format(np.random.randint(1,9999))

        # perform rejections
        tmp_data = ma.masked_array(data, mask=mask, fill_value=np.nan)
        filtered_data = sigma_clip(tmp_data, sigma=sigclip, maxiters=back_maxiters, masked=True)
        tmp_data = data.copy()
        tmp_data[filtered_data.mask] = np.nan
        par = fits.PrimaryHDU(tmp_data)
        par.writeto('{:}.fits'.format(tmp_root),overwrite=True)

        # configuration for the first SExtractor run
        sexconfig = {"CHECKIMAGE_TYPE": "BACKGROUND, BACKGROUND_RMS", "WEIGHT_TYPE": "NONE", "CATALOG_TYPE": "FITS_LDAC",
                      "CHECKIMAGE_NAME":"{:}_bkg.fits, {:}_rms.fits".format(tmp_root,tmp_root),
                      "DETECT_THRESH": 5, "ANALYSIS_THRESH": 5, "DETECT_MINAREA": 5,
                      "BACK_SIZE": '{:},{:}'.format(back_size[0],back_size[1]),
                     "BACK_FILTERSIZE":'{:},{:}'.format(filter_size[0],filter_size[1])}
        sexparams = ['NUMBER', 'X_IMAGE', 'Y_IMAGE', 'XWIN_IMAGE', 'YWIN_IMAGE', 'ERRAWIN_IMAGE', 'ERRBWIN_IMAGE',
                      'ERRTHETAWIN_IMAGE', 'ALPHA_J2000', 'DELTA_J2000', 'ISOAREAF_IMAGE', 'ISOAREA_IMAGE', 'ELLIPTICITY',
                      'ELONGATION', 'MAG_AUTO', 'MAGERR_AUTO', 'FLUX_AUTO', 'FLUXERR_AUTO', 'MAG_APER', 'MAGERR_APER']
        sex.sexone('{:}.fits'.format(tmp_root), task=sextractor_task, config=sexconfig, workdir='./', params=sexparams,
                   defaultconfig='pyphot', conv='sex', nnw=None, dual=False, delete=True, log=False)
        bkg_map = fits.getdata("{:}_bkg.fits".format(tmp_root))
        rms_map = fits.getdata("{:}_rms.fits".format(tmp_root))
        msgs.info('Removing temporary files generated by SExtractor')
        os.system('rm {:}.fits'.format(tmp_root))
        os.system('rm {:}_bkg.fits'.format(tmp_root))
        os.system('rm {:}_rms.fits'.format(tmp_root))
        os.system('rm {:}_cat.fits'.format(tmp_root))
    else:
        msgs.info('Estimating {:} BACKGROUND with Photutils Background2D.'.format(back_type))
        tmp = data.copy()
        Sigma_Clip = SigmaClip(sigma=sigclip, maxiters=back_maxiters)
        bkg = Background2D(tmp, back_size, mask=mask, filter_size=filter_size, sigma_clip=Sigma_Clip,
                           bkg_estimator=bkg_estimator, bkgrms_estimator=bkgrms_estimator)
        bkg_map, rms_map = bkg.background, bkg.background_rms
        del tmp, bkg
        gc.collect()

    return bkg_map, rms_map